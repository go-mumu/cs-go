// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-mumu/cs-go/service/dal/model"
)

func newWxuser(db *gorm.DB, opts ...gen.DOOption) wxuser {
	_wxuser := wxuser{}

	_wxuser.wxuserDo.UseDB(db, opts...)
	_wxuser.wxuserDo.UseModel(&model.Wxuser{})

	tableName := _wxuser.wxuserDo.TableName()
	_wxuser.ALL = field.NewAsterisk(tableName)
	_wxuser.Userid = field.NewInt32(tableName, "userid")
	_wxuser.Mid = field.NewUint64(tableName, "mid")
	_wxuser.Nickname = field.NewString(tableName, "nickname")
	_wxuser.Openid = field.NewString(tableName, "openid")
	_wxuser.Unionid = field.NewString(tableName, "unionid")
	_wxuser.CsOpenid = field.NewString(tableName, "cs_openid")
	_wxuser.XcxOpenid = field.NewString(tableName, "xcx_openid")
	_wxuser.Sex = field.NewInt32(tableName, "sex")
	_wxuser.City = field.NewString(tableName, "city")
	_wxuser.Province = field.NewString(tableName, "province")
	_wxuser.Points = field.NewInt32(tableName, "points")
	_wxuser.Long = field.NewInt32(tableName, "long")
	_wxuser.Longtime = field.NewTime(tableName, "longtime")
	_wxuser.URL = field.NewString(tableName, "url")
	_wxuser.Vip7 = field.NewInt32(tableName, "vip7")
	_wxuser.Viptime = field.NewTime(tableName, "viptime")
	_wxuser.Vipvalidity = field.NewTime(tableName, "vipvalidity")
	_wxuser.Createtime = field.NewTime(tableName, "createtime")
	_wxuser.SubChannel = field.NewString(tableName, "sub_channel")
	_wxuser.SubChannelTime = field.NewTime(tableName, "sub_channel_time")
	_wxuser.XcxSubChannel = field.NewString(tableName, "xcx_sub_channel")
	_wxuser.XcxSubChannelTime = field.NewTime(tableName, "xcx_sub_channel_time")
	_wxuser.BookChannel = field.NewString(tableName, "book_channel")
	_wxuser.UserChannel = field.NewInt32(tableName, "user_channel")
	_wxuser.UserType = field.NewInt32(tableName, "user_type")
	_wxuser.ActivityName = field.NewString(tableName, "activity_name")

	_wxuser.fillFieldMap()

	return _wxuser
}

type wxuser struct {
	wxuserDo wxuserDo

	ALL               field.Asterisk
	Userid            field.Int32  // 用户id
	Mid               field.Uint64 // main id 用户中心uid
	Nickname          field.String // 用户昵称
	Openid            field.String // 微信openid
	Unionid           field.String // unionid
	CsOpenid          field.String // 财商openid
	XcxOpenid         field.String // 小程序openid
	Sex               field.Int32  // 默认0,1男,2女
	City              field.String // 城市
	Province          field.String // 省份
	Points            field.Int32  // 积分
	Long              field.Int32  // 邀请人ID
	Longtime          field.Time   // 邀请时间
	URL               field.String // 头像
	Vip7              field.Int32  // 是否领取过vip
	Viptime           field.Time   // 成为vip时间
	Vipvalidity       field.Time   // vip有效时间
	Createtime        field.Time   // 添加时间
	SubChannel        field.String // 关注渠道号 默认：1000
	SubChannelTime    field.Time   // 关注渠道修改时间
	XcxSubChannel     field.String // 小程序关注渠道号 默认：1000
	XcxSubChannelTime field.Time   // 小程序关注渠道修改时间
	BookChannel       field.String // 新渠道号 默认：1000
	UserChannel       field.Int32  // 1小白营
	UserType          field.Int32  // 1裂变新用户
	ActivityName      field.String // 来源活动名称

	fieldMap map[string]field.Expr
}

func (w wxuser) Table(newTableName string) *wxuser {
	w.wxuserDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wxuser) As(alias string) *wxuser {
	w.wxuserDo.DO = *(w.wxuserDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wxuser) updateTableName(table string) *wxuser {
	w.ALL = field.NewAsterisk(table)
	w.Userid = field.NewInt32(table, "userid")
	w.Mid = field.NewUint64(table, "mid")
	w.Nickname = field.NewString(table, "nickname")
	w.Openid = field.NewString(table, "openid")
	w.Unionid = field.NewString(table, "unionid")
	w.CsOpenid = field.NewString(table, "cs_openid")
	w.XcxOpenid = field.NewString(table, "xcx_openid")
	w.Sex = field.NewInt32(table, "sex")
	w.City = field.NewString(table, "city")
	w.Province = field.NewString(table, "province")
	w.Points = field.NewInt32(table, "points")
	w.Long = field.NewInt32(table, "long")
	w.Longtime = field.NewTime(table, "longtime")
	w.URL = field.NewString(table, "url")
	w.Vip7 = field.NewInt32(table, "vip7")
	w.Viptime = field.NewTime(table, "viptime")
	w.Vipvalidity = field.NewTime(table, "vipvalidity")
	w.Createtime = field.NewTime(table, "createtime")
	w.SubChannel = field.NewString(table, "sub_channel")
	w.SubChannelTime = field.NewTime(table, "sub_channel_time")
	w.XcxSubChannel = field.NewString(table, "xcx_sub_channel")
	w.XcxSubChannelTime = field.NewTime(table, "xcx_sub_channel_time")
	w.BookChannel = field.NewString(table, "book_channel")
	w.UserChannel = field.NewInt32(table, "user_channel")
	w.UserType = field.NewInt32(table, "user_type")
	w.ActivityName = field.NewString(table, "activity_name")

	w.fillFieldMap()

	return w
}

func (w *wxuser) WithContext(ctx context.Context) *wxuserDo { return w.wxuserDo.WithContext(ctx) }

func (w wxuser) TableName() string { return w.wxuserDo.TableName() }

func (w wxuser) Alias() string { return w.wxuserDo.Alias() }

func (w wxuser) Columns(cols ...field.Expr) gen.Columns { return w.wxuserDo.Columns(cols...) }

func (w *wxuser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wxuser) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 26)
	w.fieldMap["userid"] = w.Userid
	w.fieldMap["mid"] = w.Mid
	w.fieldMap["nickname"] = w.Nickname
	w.fieldMap["openid"] = w.Openid
	w.fieldMap["unionid"] = w.Unionid
	w.fieldMap["cs_openid"] = w.CsOpenid
	w.fieldMap["xcx_openid"] = w.XcxOpenid
	w.fieldMap["sex"] = w.Sex
	w.fieldMap["city"] = w.City
	w.fieldMap["province"] = w.Province
	w.fieldMap["points"] = w.Points
	w.fieldMap["long"] = w.Long
	w.fieldMap["longtime"] = w.Longtime
	w.fieldMap["url"] = w.URL
	w.fieldMap["vip7"] = w.Vip7
	w.fieldMap["viptime"] = w.Viptime
	w.fieldMap["vipvalidity"] = w.Vipvalidity
	w.fieldMap["createtime"] = w.Createtime
	w.fieldMap["sub_channel"] = w.SubChannel
	w.fieldMap["sub_channel_time"] = w.SubChannelTime
	w.fieldMap["xcx_sub_channel"] = w.XcxSubChannel
	w.fieldMap["xcx_sub_channel_time"] = w.XcxSubChannelTime
	w.fieldMap["book_channel"] = w.BookChannel
	w.fieldMap["user_channel"] = w.UserChannel
	w.fieldMap["user_type"] = w.UserType
	w.fieldMap["activity_name"] = w.ActivityName
}

func (w wxuser) clone(db *gorm.DB) wxuser {
	w.wxuserDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wxuser) replaceDB(db *gorm.DB) wxuser {
	w.wxuserDo.ReplaceDB(db)
	return w
}

type wxuserDo struct{ gen.DO }

func (w wxuserDo) Debug() *wxuserDo {
	return w.withDO(w.DO.Debug())
}

func (w wxuserDo) WithContext(ctx context.Context) *wxuserDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wxuserDo) ReadDB() *wxuserDo {
	return w.Clauses(dbresolver.Read)
}

func (w wxuserDo) WriteDB() *wxuserDo {
	return w.Clauses(dbresolver.Write)
}

func (w wxuserDo) Session(config *gorm.Session) *wxuserDo {
	return w.withDO(w.DO.Session(config))
}

func (w wxuserDo) Clauses(conds ...clause.Expression) *wxuserDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wxuserDo) Returning(value interface{}, columns ...string) *wxuserDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wxuserDo) Not(conds ...gen.Condition) *wxuserDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wxuserDo) Or(conds ...gen.Condition) *wxuserDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wxuserDo) Select(conds ...field.Expr) *wxuserDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wxuserDo) Where(conds ...gen.Condition) *wxuserDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wxuserDo) Order(conds ...field.Expr) *wxuserDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wxuserDo) Distinct(cols ...field.Expr) *wxuserDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wxuserDo) Omit(cols ...field.Expr) *wxuserDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wxuserDo) Join(table schema.Tabler, on ...field.Expr) *wxuserDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wxuserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wxuserDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wxuserDo) RightJoin(table schema.Tabler, on ...field.Expr) *wxuserDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wxuserDo) Group(cols ...field.Expr) *wxuserDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wxuserDo) Having(conds ...gen.Condition) *wxuserDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wxuserDo) Limit(limit int) *wxuserDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wxuserDo) Offset(offset int) *wxuserDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wxuserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wxuserDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wxuserDo) Unscoped() *wxuserDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wxuserDo) Create(values ...*model.Wxuser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wxuserDo) CreateInBatches(values []*model.Wxuser, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wxuserDo) Save(values ...*model.Wxuser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wxuserDo) First() (*model.Wxuser, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wxuser), nil
	}
}

func (w wxuserDo) Take() (*model.Wxuser, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wxuser), nil
	}
}

func (w wxuserDo) Last() (*model.Wxuser, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wxuser), nil
	}
}

func (w wxuserDo) Find() ([]*model.Wxuser, error) {
	result, err := w.DO.Find()
	return result.([]*model.Wxuser), err
}

func (w wxuserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Wxuser, err error) {
	buf := make([]*model.Wxuser, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wxuserDo) FindInBatches(result *[]*model.Wxuser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wxuserDo) Attrs(attrs ...field.AssignExpr) *wxuserDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wxuserDo) Assign(attrs ...field.AssignExpr) *wxuserDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wxuserDo) Joins(fields ...field.RelationField) *wxuserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wxuserDo) Preload(fields ...field.RelationField) *wxuserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wxuserDo) FirstOrInit() (*model.Wxuser, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wxuser), nil
	}
}

func (w wxuserDo) FirstOrCreate() (*model.Wxuser, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wxuser), nil
	}
}

func (w wxuserDo) FindByPage(offset int, limit int) (result []*model.Wxuser, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wxuserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wxuserDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wxuserDo) Delete(models ...*model.Wxuser) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wxuserDo) withDO(do gen.Dao) *wxuserDo {
	w.DO = *do.(*gen.DO)
	return w
}
